varManagerServer = "cm-master-dev2"
varCDHServer = "cdh-master-dev2"
varSlaveServer = "cdh-node-dev2"
varEdgeNode = "dev-edgenode"


varRamMan=30720
varRamNode=30720
varRamEdgeNode=3072

varDomain = "xpoint.internal"
varRepository = "E:/Barclays/CDH-DEV2/REPOSITORY/"

hadoop_nodes = [# Cloudera Manager
              {:host => "#{varManagerServer}""-1", :ip => "10.10.48.35", :box => "templateMasterNode", :gui => false, :ram => varRamMan, :cpu => 8},

              # Hadoop Masters
              {:host => "#{varCDHServer}""-1", :ip => "10.10.48.36", :box => "templateSlaveNode", :gui => false, :ram => varRamMan, :cpu => 8},
              {:host => "#{varCDHServer}""-2", :ip => "10.10.48.37", :box => "templateSlaveNode", :gui => false, :ram => varRamMan, :cpu => 8},

              # Hadoop Slaves
            #  {:host => "#{varSlaveServer}""-1", :ip => "10.10.48.30", :box => "templateSlaveNode", :gui => false, :ram => varRamNode, :cpu => 2},
            #  {:host => "#{varSlaveServer}""-2", :ip => "10.10.48.31", :box => "templateSlaveNode", :gui => false, :ram => varRamNode, :cpu => 2},
            #  {:host => "#{varSlaveServer}""-3", :ip => "10.10.48.32", :box => "templateSlaveNode", :gui => false, :ram => varRamNode, :cpu => 2},
            #  {:host => "#{varSlaveServer}""-4", :ip => "10.10.48.33", :box => "templateSlaveNode", :gui => false, :ram => varRamNode, :cpu => 2},
            #  {:host => "#{varSlaveServer}""-5", :ip => "10.10.48.34", :box => "templateSlaveNode", :gui => false, :ram => varRamNode, :cpu => 2}

              # Hadoop EdgeNode
              {:host => "#{varEdgeNode}""-1", :ip => "10.10.48.30", :box => "templateSlaveNode", :gui => false, :ram => varRamEdgeNode, :cpu => 2},
]
#Available IPS = 27,28,29
## ################################################################
## START - HOSTS FOR GUESTS
## ################################################################
varHostEntries = ""
hadoop_nodes.each do |hadoop_node|
	varHostEntries << "#{hadoop_node[:ip]} #{hadoop_node[:host]}.#{varDomain} #{hadoop_node[:host]}\n"
end

puts varHostEntries

$etchosts = <<SCRIPT
#!/bin/bash
cat > /etc/hosts <<EOF
127.0.0.1       localhost
10.10.48.1      host.#{varDomain} host
#{varHostEntries}
EOF
SCRIPT


## ################################################################
## END - HOSTS FOR GUESTS
## ################################################################

Vagrant.configure("2") do |config|

  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = false
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true

  hadoop_nodes.each do |hadoop_node|
	config.vm.define hadoop_node[:host] do |hadoop_config|

		hadoop_config.ssh.username = "vagrant"
		hadoop_config.ssh.password = "vagrant"

		hadoop_config.vm.box = hadoop_node[:box]
		hadoop_config.vm.hostname = "#{hadoop_node[:host]}.#{varDomain}"
		hadoop_config.vm.network "private_network", ip: hadoop_node[:ip], :netmask => "255.255.255.0"

		hadoop_config.hostmanager.aliases = "#{hadoop_node[:host]}"

		hadoop_config.vm.provider :virtualbox do |v|
			v.name = hadoop_node[:host].to_s
			v.gui = hadoop_node[:gui]

			v.customize ["modifyvm", :id, "--memory", hadoop_node[:ram].to_s]
			v.customize ["modifyvm", :id, "--cpus", hadoop_node[:cpu].to_s]
		end

		hadoop_config.vm.synced_folder varRepository, "/repository",
			id: "repository",
			owner: "vagrant",
			group: "vagrant"

		hadoop_config.vm.provision :shell, :inline => $etchosts

    hadoop_config.vm.provision :shell, :path => "os-tuning/installpackages.sh"
		hadoop_config.vm.provision :shell, :path => "os-tuning/provision_for_print_os.sh"
		hadoop_config.vm.provision :shell, :path => "os-tuning/provision_for_os_settings.sh"
		hadoop_config.vm.provision :shell, :path => "os-tuning/provision_for_os.sh"
		hadoop_config.vm.provision :shell, :path => "os-tuning/provision_for_print_os.sh"

		if hadoop_node[:host] == varManagerServer
			hadoop_config.vm.provision :shell, :path => "webserver/provision_for_httpd_start_67_v2.sh"


			hadoop_config.vm.provision :shell, :path => "cloudera-manager-deploy/provision_for_cm_server.sh"
		end

		hadoop_config.vm.provision :shell, :path => "cloudera-node-deploy/provision_for_cm_client_v2.sh",
			:args => "#{varManagerServer}"

	end
  end
end
